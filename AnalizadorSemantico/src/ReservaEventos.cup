/* ----------------------Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.DateFormat;
/* ----------------------Seccion componentes de codigo de usuario --------------------*/

parser code {:

    /* Cambia el método report_error de manera que se mostrará la línea y
       columna de la entrada donde ocurre el error así como la
       razón del error que es pasada al método en el
       String 'message'. */

    public void report_error(String message, Object info) {
   
        /* Crea un StringBuffer llamado 'm' con el string 'Error' en él. */

        StringBuffer m = new StringBuffer("Error");
   
        /* Chequea si la información pasada al método es del mismo
           tipo que el tipo java_cup.runtime.Symbol. */

        if (info instanceof java_cup.runtime.Symbol) {

            /* Declara un objeto 's' del tipo java_cup.runtime.Symbol con la
               información que hay en el objeto info que está siendo convertido
               como un objeto java_cup.runtime.Symbol. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Chequea si el número de línea en la entrada es mayor o
               igual que cero. */
            if (s.left >= 0) {                
                /* Añade al final del mensaje de error StringBuffer
                   el número de línea del error en la entrada. */
                m.append(" en la linea "+(s.left+1));   
                /* Chequea si el número de columna en la entrada es mayor
                   o igual que cero. */
                if (s.right >= 0)                    
                    /* Añade al final del mensaje de error StringBuffer
                       el número de columna del error en la entrada. */
                    m.append(", columna "+(s.right+1));
            }
        }
   
        /* Añade al final del mensaje de error StringBuffer creado en
           este método el mensaje que fue pasado a este método. */
        m.append(" : "+message);
   
        /* Imprime los contenidos del StringBuffer 'm', que contiene
           el mensaje de error. */
        System.err.println(m);
        
         /* Manda a un fichero de log los errores producidos */
         String fileName = "messages.log";
         java.io.FileWriter fileWriter = null;
		   try {
		   	fileWriter = new java.io.FileWriter(fileName,true);
		   	java.io.BufferedWriter br = new java.io.BufferedWriter(fileWriter);
		   	br.write(m.toString()+"\n");
		   	br.close();
		   } catch (IOException e) {
		   	e.printStackTrace();
		   }
    }
   
    /* Cambia el método report_fatal_error de manera que cuando se informa
       de un error fatal se mostrará el número de línea y columna donde el
       fatal error ha ocurrido en la entrada así como la razón del error 
       fatal que es pasado al método en el objeto 'message' y entonces sale.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/

terminal LLAIZQ, LLADER, COMA, PYC, SEPARADOR;
terminal String ESP, TIP, EVE, CAD, FYH;
non terminal S, LISTA_ESP, EXPR_ESP, LISTA_TIP, EXPR_TIP, LISTA_EVE, LINEA_EVE, EXPR_EVE;

precedence left ESP, TIP, EVE;

/* --------------Declaracion de la gramatica -----------*/

S ::= LISTA_ESP LISTA_TIP LISTA_EVE;
LISTA_ESP ::= ESP LLAIZQ EXPR_ESP;
EXPR_ESP ::= CAD LLADER | CAD COMA EXPR_ESP;
LISTA_TIP ::= TIP LLAIZQ EXPR_TIP;
EXPR_TIP ::= CAD LLADER | CAD COMA EXPR_TIP;
LISTA_EVE ::= EVE LLAIZQ LINEA_EVE;
LINEA_EVE ::= EXPR_EVE LLADER | EXPR_EVE LINEA_EVE;
EXPR_EVE ::= CAD EXPR_EVE | CAD SEPARADOR CAD:ctip SEPARADOR CAD:cesp SEPARADOR FYH:fechaInicio SEPARADOR FYH:fechaFin PYC {:
String e = (String)cesp;
String t = (String)ctip;
DateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm");
formato.setLenient(false);
try{
Date dateInicio = formato.parse(fechaInicio);
Date dateFin = formato.parse(fechaFin);
if(dateFin.before(dateInicio)){
    parser.report_error("La fecha de fin de reserva es anterior a la fecha de inicio", fechaFin);
}
}catch (Exception exception){
    parser.report_error("El formato de la fecha es incorrecto", fechaInicio);
}
if(!Datos.existeEspacio(e)){
    parser.report_error("No existe el espacio "+e+".",cesp);
}
if(!Datos.existeTipo(t)){
    parser.report_error("No existe el tipo "+t+".",ctip);
}
 :}
| error PYC;